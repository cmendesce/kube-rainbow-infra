apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: tactics
data:
  tactics.s: |
    module kubow.tactics;

    import model "ZNewsSys:Acme" { ZNewsSys as M, Kubernetes as K};
    import op "org.sa.rainbow.stitch.lib.*";


    define boolean lowMode = org.sa.rainbow.stitch.Operators.containerImage(M.znn, "znn", "cmendes/znn:low");
    define boolean highMode = org.sa.rainbow.stitch.Operators.containerImage(M.znn, "znn", "cmendes/znn:high");


    tactic addReplicas(int count) {
      condition {
        M.znn-service.latency > 1000;
      }
      action {
        int futureReplicas = M.znn.desiredReplicas + count;
        if (futureReplicas < M.znn.maxReplicas) {
          M.scaleUp(M.znn, futureReplicas);
        } else {
          M.logger("Cannot add replicas. Reached out max replicas constraint");
        }
      }
      effect {
        M.znn-service.latency < 1000;
      }
    }

    tactic removeReplicas(int count) {
      condition {
        M.znn-service.latency < 1000;
      }
      action {
        int futureReplicas = M.znn.desiredReplicas - count;
        M.scaleDown(M.znn, futureReplicas);
      }
      effect {
        M.znn-service.latency < 1000;
      }
    }

    tactic decreaseFidelity () {
      condition {
        M.znn-service.latency > 1500;
      }
      action {

        if (highMode) {
          M.rollOut(M.znn, "znn", "cmendes/znn:low");
        }

        if (lowMode) {
          M.rollOut(M.znn, "znn", "cmendes/znn:text");
        }
      }
      effect {
        M.znn-service.latency < 1500;
      }
    }